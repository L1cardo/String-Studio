//
//  XCStringsModel.swift
//  String Studio
//
//  Created by Licardo on 2025/10/12.
//

import Foundation

/// XCStrings 文档的根结构
struct XCStringsDocument: Codable, Equatable {
    /// 源语言代码
    let sourceLanguage: String
    /// 所有字符串条目
    var strings: [String: StringEntry]
    /// 文档版本
    let version: String

    init(sourceLanguage: String = "en", strings: [String: StringEntry] = [:], version: String = "1.1") {
        self.sourceLanguage = sourceLanguage
        self.strings = strings
        self.version = version
    }

    static func == (lhs: XCStringsDocument, rhs: XCStringsDocument) -> Bool {
        return lhs.sourceLanguage == rhs.sourceLanguage &&
            lhs.strings == rhs.strings &&
            lhs.version == rhs.version
    }
}

/// 字符串条目结构
struct StringEntry: Codable, Equatable {
    /// 注释信息
    let comment: String?
    /// 提取状态
    let extractionState: String?
    /// 注释是否自动生成
    let isCommentAutoGenerated: Bool?
    /// 是否应该翻译
    let shouldTranslate: Bool?
    /// 本地化数据
    var localizations: [String: Localization]?

    init(comment: String? = nil,
         extractionState: String? = nil,
         isCommentAutoGenerated: Bool? = nil,
         shouldTranslate: Bool? = nil,
         localizations: [String: Localization]? = nil)
    {
        self.comment = comment
        self.extractionState = extractionState
        self.isCommentAutoGenerated = isCommentAutoGenerated
        self.shouldTranslate = shouldTranslate
        self.localizations = localizations
    }
}

/// 本地化数据结构
struct Localization: Codable, Equatable {
    /// 字符串单元
    let stringUnit: StringUnit?
    /// 变体数据（用于不同设备）
    let variations: Variations?

    init(stringUnit: StringUnit? = nil, variations: Variations? = nil) {
        self.stringUnit = stringUnit
        self.variations = variations
    }
}

/// 字符串单元结构
struct StringUnit: Codable, Equatable {
    /// 翻译状态
    let state: TranslationState
    /// 字符串值
    let value: String

    init(state: TranslationState = .new, value: String) {
        self.state = state
        self.value = value
    }
}

/// 翻译状态枚举
enum TranslationState: String, Codable, CaseIterable, Comparable {
    /// 不需要翻译
    case dontTranslate = "dont_translate"
    /// 新建
    case new
    /// 已翻译
    case translated
    /// 需要审核
    case needsReview = "needs_review"

    /// 显示名称
    var displayName: String {
        switch self {
        case .dontTranslate: return "DON'T TRANSLATE"
        case .new: return "NEW"
        case .translated: return "TRANSLATED"
        case .needsReview: return "NEEDS REVIEW"
        }
    }

    /// 实现比较操作符，用于排序
    static func < (lhs: TranslationState, rhs: TranslationState) -> Bool {
        // 定义排序优先级：new < needsReview < translated < dontTranslate
        switch (lhs, rhs) {
        case (.new, _): return rhs != .new
        case (_, .new): return false
        case (.needsReview, _): return rhs == .translated || rhs == .dontTranslate
        case (_, .needsReview): return lhs == .new
        case (.translated, _): return rhs == .dontTranslate
        case (_, .translated): return lhs == .new || lhs == .needsReview
        case (.dontTranslate, _): return false
        }
    }
}

/// 变体数据结构（用于不同设备的本地化）
struct Variations: Codable, Equatable {
    /// 设备相关的本地化
    let device: [String: Localization]?

    init(device: [String: Localization]? = nil) {
        self.device = device
    }
}
